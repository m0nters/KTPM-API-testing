name: deploy

on:
    workflow_run:
        workflows: ["unit test"]
        types:
            - completed

concurrency: production_environment

jobs:
    deploy:
        if: >
            ${{
              github.event.workflow_run.conclusion == 'success' &&
              (
                github.event.workflow_run.head_branch == 'main' ||
                github.event.workflow_run.head_branch == 'develop' ||
                startsWith(github.event.workflow_run.head_branch, 'feature/')
              )
            }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                sprint: ["5-with-bugs"]

        env:
            NODE_VERSION: ${{ matrix.sprint == '5' && '22.2.0' || '16' }}
            SECRET_GOOGLE_ID: ${{ matrix.sprint == '5' && secrets.SECRET_GOOGLE_ID || '' }}
            SECRET_GOOGLE_SECRET: ${{ matrix.sprint == '5' && secrets.SECRET_GOOGLE_SECRET || '' }}
            SECRET_GITHUB_ID: ${{ matrix.sprint == '5' && secrets.SECRET_GITHUB_ID || '' }}
            SECRET_GITHUB_SECRET: ${{ matrix.sprint == '5' && secrets.SECRET_GITHUB_SECRET || '' }}
            BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
            ENVIRONMENT: >-
                ${{ github.event.workflow_run.head_branch == 'main' && 'production' || 
                    (github.event.workflow_run.head_branch == 'develop' && 'qa' || 'dev') }}
            VPS_HOST: >-
                ${{ github.event.workflow_run.head_branch == 'main' && 'prod-vps.example.com' || 
                    (github.event.workflow_run.head_branch == 'develop' && 'qa-vps.example.com' || 'dev-vps.example.com') }}

        steps:
            - name: Checkout triggered branch
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.workflow_run.head_branch }}

            - name: Detect Environment 🎯
              run: |
                  echo "🌍 Environment: ${{ env.ENVIRONMENT }}"
                  echo "🖥️ Target VPS: ${{ env.VPS_HOST }}"
                  echo "🌿 Branch: ${{ env.BRANCH_NAME }}"

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.3"

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install (dev) Dependencies
              run: |
                  cd sprint${{ matrix.sprint }}/API
                  composer update --no-progress --prefer-dist

            - name: Install Dependencies
              run: |
                  cd sprint${{ matrix.sprint }}/API
                  composer update --no-dev --prefer-dist --optimize-autoloader
                  composer dump-autoload -o

            - name: Make envfile
              uses: danielr1996/envsubst-action@1.0.0
              env:
                  SECRET_DB: ${{ secrets.SECRET_DB }}
                  SECRET_DB_USER: ${{ secrets.SECRET_DB_USER }}
                  SECRET_DB_PASS: ${{ secrets.SECRET_DB_PASS }}
                  SECRET_GOOGLE_ID: ${{ env.SECRET_GOOGLE_ID }}
                  SECRET_GOOGLE_SECRET: ${{ env.SECRET_GOOGLE_SECRET }}
                  SECRET_GITHUB_ID: ${{ env.SECRET_GITHUB_ID }}
                  SECRET_GITHUB_SECRET: ${{ env.SECRET_GITHUB_SECRET }}
              with:
                  input: sprint${{ matrix.sprint }}/API/.env_template
                  output: sprint${{ matrix.sprint }}/API/.env

            # Production Deployment
            - name: Deploy to Production VPS 🚀
              if: env.ENVIRONMENT == 'production'
              run: |
                  echo "🏭 PRODUCTION DEPLOYMENT"
                  echo "=========================================="
                  echo "🖥️ Connecting to Production VPS: ${{ env.VPS_HOST }}"
                  echo "🔐 Using production SSH key"
                  echo "🌿 Deploying from ${{ env.BRANCH_NAME }} branch"
                  echo "⚙️ Environment: production"
                  echo "🗄️ Database: production_db"
                  sleep 3
                  echo "✅ Production deployment done"

            # QA Deployment
            - name: Deploy to QA VPS 🧪
              if: env.ENVIRONMENT == 'qa'
              run: |
                  echo "🧪 QA DEPLOYMENT"
                  echo "=========================================="
                  echo "🖥️ Connecting to QA VPS: ${{ env.VPS_HOST }}"
                  echo "🔐 Using QA SSH key"
                  echo "🌿 Deploying from ${{ env.BRANCH_NAME }} branch"
                  echo "⚙️ Environment: qa"
                  echo "🗄️ Database: qa_db"
                  sleep 2
                  echo "✅ QA deployment done"

            # Dev Deployment
            - name: Deploy to Dev VPS 👨‍💻
              if: env.ENVIRONMENT == 'dev'
              run: |
                  echo "👨‍💻 DEV DEPLOYMENT"
                  echo "=========================================="
                  echo "🖥️ Connecting to Dev VPS: ${{ env.VPS_HOST }}"
                  echo "🔐 Using Dev SSH key"
                  echo "🌿 Deploying from ${{ env.BRANCH_NAME }} branch"
                  echo "⚙️ Environment: dev"
                  echo "🗄️ Database: dev_db"
                  sleep 1
                  echo "✅ Dev deployment done"

            # Post-deployment tasks
            - name: Post-Deployment Tasks
              run: |
                  echo "🔧 Post-deployment for ${{ env.ENVIRONMENT }}"
                  echo "✅ Tasks completed"
                  echo "📧 Notification sent"

            - name: Deployment Summary 📊
              run: |
                  echo "📊 DEPLOYMENT SUMMARY"
                  echo "=========================================="
                  echo "🌍 Environment: ${{ env.ENVIRONMENT }}"
                  echo "🖥️ Target Server: ${{ env.VPS_HOST }}"
                  echo "🌿 Branch: ${{ env.BRANCH_NAME }}"
                  echo "⏰ Deployment Time: $(date)"
                  echo "👤 Triggered by: ${{ github.actor }}"
                  echo "🔗 Commit: ${{ github.sha }}"
                  echo "✅ Deployment Status: SUCCESS"
